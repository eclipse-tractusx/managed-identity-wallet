# /********************************************************************************
# * Copyright (c) 2021,2023 Contributors to the Eclipse Foundation
# *
# * See the NOTICE file(s) distributed with this work for additional
# * information regarding copyright ownership.
# *
# * This program and the accompanying materials are made available under the
# * terms of the Apache License, Version 2.0 which is available at
# * https://www.apache.org/licenses/LICENSE-2.0.
# *
# * Unless required by applicable law or agreed to in writing, software
# * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# * License for the specific language governing permissions and limitations
# * under the License.
# *
# * SPDX-License-Identifier: Apache-2.0
# ********************************************************************************/

suite: test default deployment
chart:
  version: 9.9.9+test
  appVersion: 9.9.9
tests:
  - it: should have correct metadata
    template: templates/deployment.yaml
    asserts:
      - hasDocuments:
          count: 1
      - containsDocument:
          kind: Deployment
          apiVersion: apps/v1
          name: RELEASE-NAME-managed-identity-wallet
      - isSubset:
          path: metadata.labels
          content:
            helm.sh/chart: managed-identity-wallet-9.9.9_test
            app.kubernetes.io/name: managed-identity-wallet
            app.kubernetes.io/instance: RELEASE-NAME
            app.kubernetes.io/version: "9.9.9"
            app.kubernetes.io/managed-by: Helm

  - it: must have important values set
    template: templates/deployment.yaml
    asserts:
      - equal:
          path: spec.replicas
          value: 1
      - lengthEqual:
          path: spec.template.spec.containers
          count: 1
      - isNotEmpty:
          path: spec.template.spec.serviceAccountName
      - contains:
          path: spec.template.spec.containers[0].ports
          content:
            name: http
            containerPort: 8080
            protocol: TCP

  - it: must have probes set
    template: templates/deployment.yaml
    asserts:
      - isNotEmpty:
          path: spec.template.spec.containers[0].livenessProbe
      - isNotEmpty:
          path: spec.template.spec.containers[0].readinessProbe

  - it: must have resource limits set
    template: templates/deployment.yaml
    asserts:
      - isNotEmpty:
          path: spec.template.spec.containers[0].resources
      - isNotEmpty:
          path: spec.template.spec.containers[0].resources.limits
      - isNotEmpty:
          path: spec.template.spec.containers[0].resources.limits.cpu
      - isNotEmpty:
          path: spec.template.spec.containers[0].resources.limits.memory
      - isNotEmpty:
          path: spec.template.spec.containers[0].resources.requests
      - isNotEmpty:
          path: spec.template.spec.containers[0].resources.requests.cpu
      - isNotEmpty:
          path: spec.template.spec.containers[0].resources.requests.memory

  - it: must have a security context
    template: templates/deployment.yaml
    asserts:
      - isSubset:
          path: spec.template.spec.containers[0].securityContext
          content:
            allowPrivilegeEscalation: false
            privileged: false
            runAsGroup: 11111
            runAsNonRoot: true
            runAsUser: 11111

  - it: should have environment variables set
    template: templates/deployment.yaml
    asserts:
      - isNotEmpty:
          path: spec.template.spec.containers[0].env
      - lengthEqual:
          path: spec.template.spec.containers[0].env
          count: 1

  - it: should have empty values
    template: templates/deployment.yaml
    asserts:
      - notExists:
          path: spec.template.spec.affinity
      - notExists:
          path: spec.template.spec.tolerations

  - it: should have nodeSelector value set
    template: templates/deployment.yaml
    asserts:
      - exists:
          path: spec.template.spec.nodeSelector
      - isSubset:
          path: spec.template.spec.nodeSelector
          content:
            "kubernetes.io/os": linux

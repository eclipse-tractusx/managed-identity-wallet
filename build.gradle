plugins {
    id 'java'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springDependencyVersion}"
    id "jacoco"
    id 'project-report'

}

group = "${groupName}"
version = "${applicationVersion}"
sourceCompatibility = JavaVersion.VERSION_17

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url = uri("https://repo.danubetech.com/repository/maven-public")
    }
    maven { url 'https://jitpack.io' }
    maven {
        url = uri("https://maven.pkg.github.com/catenax-ng/product-lab-ssi")
        credentials {
            username = "${githubUserName}"
            password = "${githubToken}"
        }
    }
}

ext {

}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.security:spring-security-oauth2-resource-server'
    implementation 'org.springframework.security:spring-security-oauth2-jose'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation "org.springdoc:springdoc-openapi-starter-common:${openApiVersion}"
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${openApiVersion}"
    implementation group: 'com.smartsensesolutions', name: 'commons-dao', version: '0.0.5'
    implementation 'org.liquibase:liquibase-core'
    implementation 'org.eclipse.tractusx.ssi:cx-ssi-lib:0.0.16'

    //Added explicitly to mitigate CVE 2022-1471
    implementation group: 'org.yaml', name: 'snakeyaml', version: '2.0'

    //Added explicitly to mitigate CVE 2023-24998
    implementation group: 'commons-fileupload', name: 'commons-fileupload', version: '1.5'


    testImplementation 'org.projectlombok:lombok:1.18.28'
    runtimeOnly 'org.postgresql:postgresql'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "org.testcontainers:testcontainers"
    testImplementation 'com.h2database:h2:2.2.220'
    testImplementation "org.testcontainers:junit-jupiter"
    testImplementation group: 'com.github.dasniko', name: 'testcontainers-keycloak', version: '2.5.0'
    testImplementation group: 'org.mockito', name: 'mockito-inline', version: '5.2.0'
    testImplementation group: 'org.json', name: 'json', version: '20230227'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom("org.testcontainers:testcontainers-bom:${testContainerVersion}")
    }
}

build {
    archivesBaseName = "miw"
    version = "latest"
}

bootJar {
	metaInf {
		from 'DEPENDENCIES'
		from 'SECURITY.md'
		from 'NOTICE.md'
		from 'LICENSE'
	}
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

htmlDependencyReport {
    projects = project.allprojects
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
        html.destination file("${buildDir}/reports/html/jacoco")
        xml.destination file("${buildDir}/reports/xml/jacoco")
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "org/eclipse/tractusx/managedidentitywallets/dto/*",
                    "org/eclipse/tractusx/managedidentitywallets/dao/entity/*",
                    "org/eclipse/tractusx/managedidentitywallets/constant/*",
                    "org/eclipse/tractusx/managedidentitywallets/exception/*"
            ])
        }))
    }
}

jacoco {
    toolVersion = "${jacocoVersion}"

}


jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "org/eclipse/tractusx/managedidentitywallets/dto/*",
                    "org/eclipse/tractusx/managedidentitywallets/dao/entity/*",
                    "org/eclipse/tractusx/managedidentitywallets/constant/*",
                    "org/eclipse/tractusx/managedidentitywallets/exception/*"
            ])
        }))
    }
    violationRules {
        rule {
            limit {
                // disabled for now
                minimum = 0.00
            }
        }
    }
}

check.dependsOn jacocoTestCoverageVerification

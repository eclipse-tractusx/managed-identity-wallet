plugins {
	id 'java'
	id 'org.springframework.boot' version "${springBootVersion}"
	id 'io.spring.dependency-management' version "${springDependencyVersion}"
	id "jacoco"
}

group = "${groupName}"
version = "${applicationVersion}"
sourceCompatibility = JavaVersion.VERSION_17

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenLocal()
	mavenCentral()
	maven {
		url = uri("https://repo.danubetech.com/repository/maven-public")
	}
	maven { url 'https://jitpack.io' }
	maven {
		url = uri("https://maven.pkg.github.com/catenax-ng/product-lab-ssi")
		credentials {
			username = "${githubUserName}"
			password = "${githubToken}"
		}
	}
}

ext {

}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.security:spring-security-oauth2-resource-server'
	implementation 'org.springframework.security:spring-security-oauth2-jose'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	implementation "org.springdoc:springdoc-openapi-starter-common:${openApiVersion}"
	implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${openApiVersion}"
	implementation group: 'com.smartsensesolutions', name: 'commons-dao', version: '0.0.5'
	implementation 'org.liquibase:liquibase-core'
	implementation 'org.eclipse.tractusx.ssi:cx-ssi-lib:0.0.6'
	runtimeOnly 'org.postgresql:postgresql'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation "org.testcontainers:testcontainers"
	testImplementation "org.testcontainers:postgresql"
	testImplementation "org.testcontainers:junit-jupiter"
	testImplementation group: 'com.github.dasniko', name: 'testcontainers-keycloak', version: '2.5.0'
	testImplementation group: 'org.mockito', name: 'mockito-inline', version: '5.2.0'
	testImplementation group: 'org.json', name: 'json', version: '20230227'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		mavenBom("org.testcontainers:testcontainers-bom:${testContainerVersion}")
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

build {
	archivesBaseName = "miw"
	version = "latest"
}

test {
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test

	reports {
		xml.required = false
		csv.required = false
		html.required = true
	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"org/eclipse/tractusx/managedidentitywallets/dto/*",
					"org/eclipse/tractusx/managedidentitywallets/dao/entity/*",
					"org/eclipse/tractusx/managedidentitywallets/constant/*",
					"org/eclipse/tractusx/managedidentitywallets/exception/*"
			])
		}))
	}
}

jacoco {
	toolVersion = "${jacocoVersion}"

}


jacocoTestCoverageVerification {
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"org/eclipse/tractusx/managedidentitywallets/dto/*",
					"org/eclipse/tractusx/managedidentitywallets/dao/entity/*",
					"org/eclipse/tractusx/managedidentitywallets/constant/*",
					"org/eclipse/tractusx/managedidentitywallets/exception/*"
			])
		}))
	}
	violationRules {
		rule {
			limit {
				minimum = 0.80
			}
		}
	}
}

check.dependsOn jacocoTestCoverageVerification